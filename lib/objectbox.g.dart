// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again
// with `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'
    as obx_int; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart' as obx;

import 'model/model.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <obx_int.ModelEntity>[
  obx_int.ModelEntity(
    id: const obx_int.IdUid(1, 7174155302598907178),
    name: 'Alcaldia',
    lastPropertyId: const obx_int.IdUid(6, 4341206833808076975),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2787856129426357976),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3385012329462203694),
        name: 'nombre',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 6692172829060228597),
        name: 'valor1',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 1406752529921536103),
        name: 'valor2',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 5393942881424232823),
        name: 'valor3',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 4341206833808076975),
        name: 'autorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(1, 323703421115081313),
        relationTarget: 'User',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(2, 7569728793552927977),
    name: 'Mes',
    lastPropertyId: const obx_int.IdUid(5, 4552177305873352732),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7340796921230333525),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 6609081810473487385),
        name: 'nombre',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4466522911727684587),
        name: 'valor',
        type: 8,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 375082110207951025),
        name: 'tipo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4552177305873352732),
        name: 'programacionFinancieraId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(2, 4282641532778079269),
        relationTarget: 'ProgramacionFinanciera',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(3, 3128913982177604856),
    name: 'Noticia',
    lastPropertyId: const obx_int.IdUid(5, 6745309679807329418),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2464737244771729499),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 8007562821471842984),
        name: 'titulo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3625137693453143668),
        name: 'contenido',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 2625524984159989283),
        name: 'imagenUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 6745309679807329418),
        name: 'autorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(3, 6993051783389633760),
        relationTarget: 'User',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(4, 345871964700118698),
    name: 'OrganismoGobernacion',
    lastPropertyId: const obx_int.IdUid(6, 2814764357274507160),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 4067784790601721541),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 1342786688286553858),
        name: 'nombre',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 4362210111215080834),
        name: 'valor1',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 55188800973405329),
        name: 'valor2',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2233526670074417701),
        name: 'valor3',
        type: 6,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 2814764357274507160),
        name: 'autorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(4, 3235330452514694780),
        relationTarget: 'User',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(5, 4782675144622938945),
    name: 'Permission',
    lastPropertyId: const obx_int.IdUid(7, 2925264313791041330),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 2104556892798297262),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 4905785335024231036),
        name: 'userId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(5, 7496843907272357492),
        relationTarget: 'User',
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3095005001535238076),
        name: 'section',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 3026246283247664100),
        name: 'canCreate',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 4323845001798345351),
        name: 'canEdit',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 5449905566176060211),
        name: 'canDelete',
        type: 1,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(7, 2925264313791041330),
        name: 'canPublish',
        type: 1,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(6, 7972132619406422453),
    name: 'ProgramacionFinanciera',
    lastPropertyId: const obx_int.IdUid(4, 8570675124619399992),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 1133004463247755449),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 3620031328046404884),
        name: 'titulo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 9103654782691648490),
        name: 'descripcion',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 8570675124619399992),
        name: 'autorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(6, 5192713488096584529),
        relationTarget: 'User',
      ),
    ],
    relations: <obx_int.ModelRelation>[
      obx_int.ModelRelation(
        id: const obx_int.IdUid(1, 3615555389127585581),
        name: 'meses',
        targetId: const obx_int.IdUid(2, 7569728793552927977),
      ),
    ],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(7, 8884479045905983166),
    name: 'ResumenGestion',
    lastPropertyId: const obx_int.IdUid(5, 782135398218205475),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 7735408505402117748),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 956005580824346592),
        name: 'titulo',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 3960402769413705944),
        name: 'descripcion',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7145135753863543800),
        name: 'imagenUrl',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 782135398218205475),
        name: 'autorId',
        type: 11,
        flags: 520,
        indexId: const obx_int.IdUid(7, 9079809643456710430),
        relationTarget: 'User',
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[],
  ),
  obx_int.ModelEntity(
    id: const obx_int.IdUid(8, 927758119567071851),
    name: 'User',
    lastPropertyId: const obx_int.IdUid(6, 3890978803951295500),
    flags: 0,
    properties: <obx_int.ModelProperty>[
      obx_int.ModelProperty(
        id: const obx_int.IdUid(1, 9061487163636692081),
        name: 'id',
        type: 6,
        flags: 1,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(2, 2339287622334590460),
        name: 'email',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(3, 5215459122887733651),
        name: 'password',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(4, 7237789625372447847),
        name: 'name',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(5, 2871150013653303837),
        name: 'role',
        type: 9,
        flags: 0,
      ),
      obx_int.ModelProperty(
        id: const obx_int.IdUid(6, 3890978803951295500),
        name: 'department',
        type: 9,
        flags: 0,
      ),
    ],
    relations: <obx_int.ModelRelation>[],
    backlinks: <obx_int.ModelBacklink>[
      obx_int.ModelBacklink(
        name: 'permissions',
        srcEntity: 'Permission',
        srcField: 'user',
      ),
      obx_int.ModelBacklink(
        name: 'organismosGobernacion',
        srcEntity: 'OrganismoGobernacion',
        srcField: 'autor',
      ),
      obx_int.ModelBacklink(
        name: 'alcaldias',
        srcEntity: 'Alcaldia',
        srcField: 'autor',
      ),
      obx_int.ModelBacklink(
        name: 'programacionesFinancieras',
        srcEntity: 'ProgramacionFinanciera',
        srcField: 'autor',
      ),
      obx_int.ModelBacklink(
        name: 'resumenesGestion',
        srcEntity: 'ResumenGestion',
        srcField: 'autor',
      ),
      obx_int.ModelBacklink(
        name: 'noticias',
        srcEntity: 'Noticia',
        srcField: 'autor',
      ),
    ],
  ),
];

/// Shortcut for [obx.Store.new] that passes [getObjectBoxModel] and for Flutter
/// apps by default a [directory] using `defaultStoreDirectory()` from the
/// ObjectBox Flutter library.
///
/// Note: for desktop apps it is recommended to specify a unique [directory].
///
/// See [obx.Store.new] for an explanation of all parameters.
///
/// For Flutter apps, also calls `loadObjectBoxLibraryAndroidCompat()` from
/// the ObjectBox Flutter library to fix loading the native ObjectBox library
/// on Android 6 and older.
obx.Store openStore({
  String? directory,
  int? maxDBSizeInKB,
  int? maxDataSizeInKB,
  int? fileMode,
  int? maxReaders,
  bool queriesCaseSensitiveDefault = true,
  String? macosApplicationGroup,
}) {
  return obx.Store(
    getObjectBoxModel(),
    directory: directory,
    maxDBSizeInKB: maxDBSizeInKB,
    maxDataSizeInKB: maxDataSizeInKB,
    fileMode: fileMode,
    maxReaders: maxReaders,
    queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
    macosApplicationGroup: macosApplicationGroup,
  );
}

/// Returns the ObjectBox model definition for this project for use with
/// [obx.Store.new].
obx_int.ModelDefinition getObjectBoxModel() {
  final model = obx_int.ModelInfo(
    entities: _entities,
    lastEntityId: const obx_int.IdUid(8, 927758119567071851),
    lastIndexId: const obx_int.IdUid(7, 9079809643456710430),
    lastRelationId: const obx_int.IdUid(1, 3615555389127585581),
    lastSequenceId: const obx_int.IdUid(0, 0),
    retiredEntityUids: const [],
    retiredIndexUids: const [],
    retiredPropertyUids: const [],
    retiredRelationUids: const [],
    modelVersion: 5,
    modelVersionParserMinimum: 5,
    version: 1,
  );

  final bindings = <Type, obx_int.EntityDefinition>{
    Alcaldia: obx_int.EntityDefinition<Alcaldia>(
      model: _entities[0],
      toOneRelations: (Alcaldia object) => [object.autor],
      toManyRelations: (Alcaldia object) => {},
      getId: (Alcaldia object) => object.id,
      setId: (Alcaldia object, int id) {
        object.id = id;
      },
      objectToFB: (Alcaldia object, fb.Builder fbb) {
        final nombreOffset = fbb.writeString(object.nombre);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nombreOffset);
        fbb.addInt64(2, object.valor1);
        fbb.addInt64(3, object.valor2);
        fbb.addInt64(4, object.valor3);
        fbb.addInt64(5, object.autor.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nombreParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final valor1Param = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final valor2Param = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final valor3Param = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object = Alcaldia(
          nombre: nombreParam,
          valor1: valor1Param,
          valor2: valor2Param,
          valor3: valor3Param,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.autor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.autor.attach(store);
        return object;
      },
    ),
    Mes: obx_int.EntityDefinition<Mes>(
      model: _entities[1],
      toOneRelations: (Mes object) => [object.programacionFinanciera],
      toManyRelations: (Mes object) => {},
      getId: (Mes object) => object.id,
      setId: (Mes object, int id) {
        object.id = id;
      },
      objectToFB: (Mes object, fb.Builder fbb) {
        final nombreOffset = fbb.writeString(object.nombre);
        final tipoOffset = fbb.writeString(object.tipo);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nombreOffset);
        fbb.addFloat64(2, object.valor);
        fbb.addOffset(3, tipoOffset);
        fbb.addInt64(4, object.programacionFinanciera.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nombreParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final valorParam = const fb.Float64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final tipoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = Mes(
          nombre: nombreParam,
          valor: valorParam,
          tipo: tipoParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.programacionFinanciera.targetId = const fb.Int64Reader()
            .vTableGet(buffer, rootOffset, 12, 0);
        object.programacionFinanciera.attach(store);
        return object;
      },
    ),
    Noticia: obx_int.EntityDefinition<Noticia>(
      model: _entities[2],
      toOneRelations: (Noticia object) => [object.autor],
      toManyRelations: (Noticia object) => {},
      getId: (Noticia object) => object.id,
      setId: (Noticia object, int id) {
        object.id = id;
      },
      objectToFB: (Noticia object, fb.Builder fbb) {
        final tituloOffset = fbb.writeString(object.titulo);
        final contenidoOffset = fbb.writeString(object.contenido);
        final imagenUrlOffset =
            object.imagenUrl == null
                ? null
                : fbb.writeString(object.imagenUrl!);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, tituloOffset);
        fbb.addOffset(2, contenidoOffset);
        fbb.addOffset(3, imagenUrlOffset);
        fbb.addInt64(4, object.autor.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tituloParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final contenidoParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final imagenUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 10);
        final object = Noticia(
          titulo: tituloParam,
          contenido: contenidoParam,
          imagenUrl: imagenUrlParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.autor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.autor.attach(store);
        return object;
      },
    ),
    OrganismoGobernacion: obx_int.EntityDefinition<OrganismoGobernacion>(
      model: _entities[3],
      toOneRelations: (OrganismoGobernacion object) => [object.autor],
      toManyRelations: (OrganismoGobernacion object) => {},
      getId: (OrganismoGobernacion object) => object.id,
      setId: (OrganismoGobernacion object, int id) {
        object.id = id;
      },
      objectToFB: (OrganismoGobernacion object, fb.Builder fbb) {
        final nombreOffset = fbb.writeString(object.nombre);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, nombreOffset);
        fbb.addInt64(2, object.valor1);
        fbb.addInt64(3, object.valor2);
        fbb.addInt64(4, object.valor3);
        fbb.addInt64(5, object.autor.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final nombreParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final valor1Param = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          8,
          0,
        );
        final valor2Param = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        final valor3Param = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        final object = OrganismoGobernacion(
          nombre: nombreParam,
          valor1: valor1Param,
          valor2: valor2Param,
          valor3: valor3Param,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.autor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          14,
          0,
        );
        object.autor.attach(store);
        return object;
      },
    ),
    Permission: obx_int.EntityDefinition<Permission>(
      model: _entities[4],
      toOneRelations: (Permission object) => [object.user],
      toManyRelations: (Permission object) => {},
      getId: (Permission object) => object.id,
      setId: (Permission object, int id) {
        object.id = id;
      },
      objectToFB: (Permission object, fb.Builder fbb) {
        final sectionOffset = fbb.writeString(object.section);
        fbb.startTable(8);
        fbb.addInt64(0, object.id);
        fbb.addInt64(1, object.user.targetId);
        fbb.addOffset(2, sectionOffset);
        fbb.addBool(3, object.canCreate);
        fbb.addBool(4, object.canEdit);
        fbb.addBool(5, object.canDelete);
        fbb.addBool(6, object.canPublish);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final sectionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final canCreateParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          10,
          false,
        );
        final canEditParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          12,
          false,
        );
        final canDeleteParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          14,
          false,
        );
        final canPublishParam = const fb.BoolReader().vTableGet(
          buffer,
          rootOffset,
          16,
          false,
        );
        final object = Permission(
          section: sectionParam,
          canCreate: canCreateParam,
          canEdit: canEditParam,
          canDelete: canDeleteParam,
          canPublish: canPublishParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.user.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          6,
          0,
        );
        object.user.attach(store);
        return object;
      },
    ),
    ProgramacionFinanciera: obx_int.EntityDefinition<ProgramacionFinanciera>(
      model: _entities[5],
      toOneRelations: (ProgramacionFinanciera object) => [object.autor],
      toManyRelations:
          (ProgramacionFinanciera object) => {
            obx_int.RelInfo<ProgramacionFinanciera>.toMany(1, object.id):
                object.meses,
          },
      getId: (ProgramacionFinanciera object) => object.id,
      setId: (ProgramacionFinanciera object, int id) {
        object.id = id;
      },
      objectToFB: (ProgramacionFinanciera object, fb.Builder fbb) {
        final tituloOffset = fbb.writeString(object.titulo);
        final descripcionOffset =
            object.descripcion == null
                ? null
                : fbb.writeString(object.descripcion!);
        fbb.startTable(5);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, tituloOffset);
        fbb.addOffset(2, descripcionOffset);
        fbb.addInt64(3, object.autor.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tituloParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descripcionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGetNullable(buffer, rootOffset, 8);
        final object = ProgramacionFinanciera(
          titulo: tituloParam,
          descripcion: descripcionParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.autor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          10,
          0,
        );
        object.autor.attach(store);
        obx_int.InternalToManyAccess.setRelInfo<ProgramacionFinanciera>(
          object.meses,
          store,
          obx_int.RelInfo<ProgramacionFinanciera>.toMany(1, object.id),
        );
        return object;
      },
    ),
    ResumenGestion: obx_int.EntityDefinition<ResumenGestion>(
      model: _entities[6],
      toOneRelations: (ResumenGestion object) => [object.autor],
      toManyRelations: (ResumenGestion object) => {},
      getId: (ResumenGestion object) => object.id,
      setId: (ResumenGestion object, int id) {
        object.id = id;
      },
      objectToFB: (ResumenGestion object, fb.Builder fbb) {
        final tituloOffset = fbb.writeString(object.titulo);
        final descripcionOffset = fbb.writeString(object.descripcion);
        final imagenUrlOffset = fbb.writeString(object.imagenUrl);
        fbb.startTable(6);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, tituloOffset);
        fbb.addOffset(2, descripcionOffset);
        fbb.addOffset(3, imagenUrlOffset);
        fbb.addInt64(4, object.autor.targetId);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final tituloParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final descripcionParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final imagenUrlParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final object = ResumenGestion(
          titulo: tituloParam,
          descripcion: descripcionParam,
          imagenUrl: imagenUrlParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        object.autor.targetId = const fb.Int64Reader().vTableGet(
          buffer,
          rootOffset,
          12,
          0,
        );
        object.autor.attach(store);
        return object;
      },
    ),
    User: obx_int.EntityDefinition<User>(
      model: _entities[7],
      toOneRelations: (User object) => [],
      toManyRelations:
          (User object) => {
            obx_int.RelInfo<Permission>.toOneBacklink(
                  2,
                  object.id,
                  (Permission srcObject) => srcObject.user,
                ):
                object.permissions,
            obx_int.RelInfo<OrganismoGobernacion>.toOneBacklink(
                  6,
                  object.id,
                  (OrganismoGobernacion srcObject) => srcObject.autor,
                ):
                object.organismosGobernacion,
            obx_int.RelInfo<Alcaldia>.toOneBacklink(
                  6,
                  object.id,
                  (Alcaldia srcObject) => srcObject.autor,
                ):
                object.alcaldias,
            obx_int.RelInfo<ProgramacionFinanciera>.toOneBacklink(
                  4,
                  object.id,
                  (ProgramacionFinanciera srcObject) => srcObject.autor,
                ):
                object.programacionesFinancieras,
            obx_int.RelInfo<ResumenGestion>.toOneBacklink(
                  5,
                  object.id,
                  (ResumenGestion srcObject) => srcObject.autor,
                ):
                object.resumenesGestion,
            obx_int.RelInfo<Noticia>.toOneBacklink(
                  5,
                  object.id,
                  (Noticia srcObject) => srcObject.autor,
                ):
                object.noticias,
          },
      getId: (User object) => object.id,
      setId: (User object, int id) {
        object.id = id;
      },
      objectToFB: (User object, fb.Builder fbb) {
        final emailOffset = fbb.writeString(object.email);
        final passwordOffset = fbb.writeString(object.password);
        final nameOffset = fbb.writeString(object.name);
        final roleOffset = fbb.writeString(object.role);
        final departmentOffset = fbb.writeString(object.department);
        fbb.startTable(7);
        fbb.addInt64(0, object.id);
        fbb.addOffset(1, emailOffset);
        fbb.addOffset(2, passwordOffset);
        fbb.addOffset(3, nameOffset);
        fbb.addOffset(4, roleOffset);
        fbb.addOffset(5, departmentOffset);
        fbb.finish(fbb.endTable());
        return object.id;
      },
      objectFromFB: (obx.Store store, ByteData fbData) {
        final buffer = fb.BufferContext(fbData);
        final rootOffset = buffer.derefObject(0);
        final emailParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 6, '');
        final passwordParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 8, '');
        final nameParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 10, '');
        final roleParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 12, '');
        final departmentParam = const fb.StringReader(
          asciiOptimization: true,
        ).vTableGet(buffer, rootOffset, 14, '');
        final object = User(
          email: emailParam,
          password: passwordParam,
          name: nameParam,
          role: roleParam,
          department: departmentParam,
        )..id = const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0);
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.permissions,
          store,
          obx_int.RelInfo<Permission>.toOneBacklink(
            2,
            object.id,
            (Permission srcObject) => srcObject.user,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.organismosGobernacion,
          store,
          obx_int.RelInfo<OrganismoGobernacion>.toOneBacklink(
            6,
            object.id,
            (OrganismoGobernacion srcObject) => srcObject.autor,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.alcaldias,
          store,
          obx_int.RelInfo<Alcaldia>.toOneBacklink(
            6,
            object.id,
            (Alcaldia srcObject) => srcObject.autor,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.programacionesFinancieras,
          store,
          obx_int.RelInfo<ProgramacionFinanciera>.toOneBacklink(
            4,
            object.id,
            (ProgramacionFinanciera srcObject) => srcObject.autor,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.resumenesGestion,
          store,
          obx_int.RelInfo<ResumenGestion>.toOneBacklink(
            5,
            object.id,
            (ResumenGestion srcObject) => srcObject.autor,
          ),
        );
        obx_int.InternalToManyAccess.setRelInfo<User>(
          object.noticias,
          store,
          obx_int.RelInfo<Noticia>.toOneBacklink(
            5,
            object.id,
            (Noticia srcObject) => srcObject.autor,
          ),
        );
        return object;
      },
    ),
  };

  return obx_int.ModelDefinition(model, bindings);
}

/// [Alcaldia] entity fields to define ObjectBox queries.
class Alcaldia_ {
  /// See [Alcaldia.id].
  static final id = obx.QueryIntegerProperty<Alcaldia>(
    _entities[0].properties[0],
  );

  /// See [Alcaldia.nombre].
  static final nombre = obx.QueryStringProperty<Alcaldia>(
    _entities[0].properties[1],
  );

  /// See [Alcaldia.valor1].
  static final valor1 = obx.QueryIntegerProperty<Alcaldia>(
    _entities[0].properties[2],
  );

  /// See [Alcaldia.valor2].
  static final valor2 = obx.QueryIntegerProperty<Alcaldia>(
    _entities[0].properties[3],
  );

  /// See [Alcaldia.valor3].
  static final valor3 = obx.QueryIntegerProperty<Alcaldia>(
    _entities[0].properties[4],
  );

  /// See [Alcaldia.autor].
  static final autor = obx.QueryRelationToOne<Alcaldia, User>(
    _entities[0].properties[5],
  );
}

/// [Mes] entity fields to define ObjectBox queries.
class Mes_ {
  /// See [Mes.id].
  static final id = obx.QueryIntegerProperty<Mes>(_entities[1].properties[0]);

  /// See [Mes.nombre].
  static final nombre = obx.QueryStringProperty<Mes>(
    _entities[1].properties[1],
  );

  /// See [Mes.valor].
  static final valor = obx.QueryDoubleProperty<Mes>(_entities[1].properties[2]);

  /// See [Mes.tipo].
  static final tipo = obx.QueryStringProperty<Mes>(_entities[1].properties[3]);

  /// See [Mes.programacionFinanciera].
  static final programacionFinanciera =
      obx.QueryRelationToOne<Mes, ProgramacionFinanciera>(
        _entities[1].properties[4],
      );
}

/// [Noticia] entity fields to define ObjectBox queries.
class Noticia_ {
  /// See [Noticia.id].
  static final id = obx.QueryIntegerProperty<Noticia>(
    _entities[2].properties[0],
  );

  /// See [Noticia.titulo].
  static final titulo = obx.QueryStringProperty<Noticia>(
    _entities[2].properties[1],
  );

  /// See [Noticia.contenido].
  static final contenido = obx.QueryStringProperty<Noticia>(
    _entities[2].properties[2],
  );

  /// See [Noticia.imagenUrl].
  static final imagenUrl = obx.QueryStringProperty<Noticia>(
    _entities[2].properties[3],
  );

  /// See [Noticia.autor].
  static final autor = obx.QueryRelationToOne<Noticia, User>(
    _entities[2].properties[4],
  );
}

/// [OrganismoGobernacion] entity fields to define ObjectBox queries.
class OrganismoGobernacion_ {
  /// See [OrganismoGobernacion.id].
  static final id = obx.QueryIntegerProperty<OrganismoGobernacion>(
    _entities[3].properties[0],
  );

  /// See [OrganismoGobernacion.nombre].
  static final nombre = obx.QueryStringProperty<OrganismoGobernacion>(
    _entities[3].properties[1],
  );

  /// See [OrganismoGobernacion.valor1].
  static final valor1 = obx.QueryIntegerProperty<OrganismoGobernacion>(
    _entities[3].properties[2],
  );

  /// See [OrganismoGobernacion.valor2].
  static final valor2 = obx.QueryIntegerProperty<OrganismoGobernacion>(
    _entities[3].properties[3],
  );

  /// See [OrganismoGobernacion.valor3].
  static final valor3 = obx.QueryIntegerProperty<OrganismoGobernacion>(
    _entities[3].properties[4],
  );

  /// See [OrganismoGobernacion.autor].
  static final autor = obx.QueryRelationToOne<OrganismoGobernacion, User>(
    _entities[3].properties[5],
  );
}

/// [Permission] entity fields to define ObjectBox queries.
class Permission_ {
  /// See [Permission.id].
  static final id = obx.QueryIntegerProperty<Permission>(
    _entities[4].properties[0],
  );

  /// See [Permission.user].
  static final user = obx.QueryRelationToOne<Permission, User>(
    _entities[4].properties[1],
  );

  /// See [Permission.section].
  static final section = obx.QueryStringProperty<Permission>(
    _entities[4].properties[2],
  );

  /// See [Permission.canCreate].
  static final canCreate = obx.QueryBooleanProperty<Permission>(
    _entities[4].properties[3],
  );

  /// See [Permission.canEdit].
  static final canEdit = obx.QueryBooleanProperty<Permission>(
    _entities[4].properties[4],
  );

  /// See [Permission.canDelete].
  static final canDelete = obx.QueryBooleanProperty<Permission>(
    _entities[4].properties[5],
  );

  /// See [Permission.canPublish].
  static final canPublish = obx.QueryBooleanProperty<Permission>(
    _entities[4].properties[6],
  );
}

/// [ProgramacionFinanciera] entity fields to define ObjectBox queries.
class ProgramacionFinanciera_ {
  /// See [ProgramacionFinanciera.id].
  static final id = obx.QueryIntegerProperty<ProgramacionFinanciera>(
    _entities[5].properties[0],
  );

  /// See [ProgramacionFinanciera.titulo].
  static final titulo = obx.QueryStringProperty<ProgramacionFinanciera>(
    _entities[5].properties[1],
  );

  /// See [ProgramacionFinanciera.descripcion].
  static final descripcion = obx.QueryStringProperty<ProgramacionFinanciera>(
    _entities[5].properties[2],
  );

  /// See [ProgramacionFinanciera.autor].
  static final autor = obx.QueryRelationToOne<ProgramacionFinanciera, User>(
    _entities[5].properties[3],
  );

  /// see [ProgramacionFinanciera.meses]
  static final meses = obx.QueryRelationToMany<ProgramacionFinanciera, Mes>(
    _entities[5].relations[0],
  );
}

/// [ResumenGestion] entity fields to define ObjectBox queries.
class ResumenGestion_ {
  /// See [ResumenGestion.id].
  static final id = obx.QueryIntegerProperty<ResumenGestion>(
    _entities[6].properties[0],
  );

  /// See [ResumenGestion.titulo].
  static final titulo = obx.QueryStringProperty<ResumenGestion>(
    _entities[6].properties[1],
  );

  /// See [ResumenGestion.descripcion].
  static final descripcion = obx.QueryStringProperty<ResumenGestion>(
    _entities[6].properties[2],
  );

  /// See [ResumenGestion.imagenUrl].
  static final imagenUrl = obx.QueryStringProperty<ResumenGestion>(
    _entities[6].properties[3],
  );

  /// See [ResumenGestion.autor].
  static final autor = obx.QueryRelationToOne<ResumenGestion, User>(
    _entities[6].properties[4],
  );
}

/// [User] entity fields to define ObjectBox queries.
class User_ {
  /// See [User.id].
  static final id = obx.QueryIntegerProperty<User>(_entities[7].properties[0]);

  /// See [User.email].
  static final email = obx.QueryStringProperty<User>(
    _entities[7].properties[1],
  );

  /// See [User.password].
  static final password = obx.QueryStringProperty<User>(
    _entities[7].properties[2],
  );

  /// See [User.name].
  static final name = obx.QueryStringProperty<User>(_entities[7].properties[3]);

  /// See [User.role].
  static final role = obx.QueryStringProperty<User>(_entities[7].properties[4]);

  /// See [User.department].
  static final department = obx.QueryStringProperty<User>(
    _entities[7].properties[5],
  );

  /// see [User.permissions]
  static final permissions = obx.QueryBacklinkToMany<Permission, User>(
    Permission_.user,
  );

  /// see [User.organismosGobernacion]
  static final organismosGobernacion =
      obx.QueryBacklinkToMany<OrganismoGobernacion, User>(
        OrganismoGobernacion_.autor,
      );

  /// see [User.alcaldias]
  static final alcaldias = obx.QueryBacklinkToMany<Alcaldia, User>(
    Alcaldia_.autor,
  );

  /// see [User.programacionesFinancieras]
  static final programacionesFinancieras =
      obx.QueryBacklinkToMany<ProgramacionFinanciera, User>(
        ProgramacionFinanciera_.autor,
      );

  /// see [User.resumenesGestion]
  static final resumenesGestion = obx.QueryBacklinkToMany<ResumenGestion, User>(
    ResumenGestion_.autor,
  );

  /// see [User.noticias]
  static final noticias = obx.QueryBacklinkToMany<Noticia, User>(
    Noticia_.autor,
  );
}
